Using Paper.js you can easily work with the colors of individual pixels of <api Raster /> items.

<title>Raster Size</title>
The <api Raster#size /> property of a raster specifies its size in pixels as a <api Size /> object. It doesn't matter if you transform an image, its size in pixels will stay the same. Changing this size means that the image will be re-interpolated. This will come in handy later when we want to iterate through the individual pixels of an image, since the average size of an image contains way too many pixels.

<paperscript height=100 split=true>
// Create a raster item using the image tag with id='mona'
var raster = new Raster('mona');
// Move the raster to the center of the view
raster.position = view.center;

// As the web is asynchronous, we need to wait for the raster to load
// before we can perform any operation on its pixels.
raster.on('load', function() {
	// Downsize the pixel content to 80 pixels wide and 60 pixels high:
	raster.size = new Size(80, 60);
});

</paperscript>

<title>Colors of Pixels</title>
To find the color of a specific pixel in a raster, we use <api Raster#getPixel(x,y) /> and pass it the x and y offset of the pixel we want to look at. The <api Raster#getPixel(x,y) /> function returns the color of the pixel as an <api Color />.

The following script loops through the pixels of the selected raster and creates a circle shaped path for each of them and fills them with the color of the pixels.

<paperscript height=400 split=true>
// Create a raster item using the image tag with id='mona'
var raster = new Raster('mona');

// Hide the raster:
raster.visible = false;

// The size of our grid cells:
var gridSize = 12;

// Space the cells by 120%:
var spacing = 1.2;

// As the web is asynchronous, we need to wait for the raster to load
// before we can perform any operation on its pixels.
raster.on('load', function() {
	// Since the example image we're using is much too large,
	// and therefore has way too many pixels, lets downsize it to
	// 40 pixels wide and 30 pixels high:
	raster.size = new Size(40, 30);

	for (var y = 0; y < raster.height; y++) {
		for(var x = 0; x < raster.width; x++) {
			// Get the color of the pixel:
			var color = raster.getPixel(x, y);

			// Create a circle shaped path:
			var path = new Path.Circle({
				center: new Point(x, y) * gridSize,
				radius: gridSize / 2 / spacing
			});

			// Set the fill color of the path to the color
			// of the pixel:
			path.fillColor = color;
		}
	}

	// Move the active layer to the center of the view, so all 
	// the created paths in it appear centered.
	project.activeLayer.position = view.center;
});

// Move the active layer to the center of the view:
project.activeLayer.position = view.center;
</paperscript>

<title>Using Color Channel Values</title>

Instead of directly using the colors returned from <api Raster#getPixel(x,y) />, we can also use the values of their individual channels to do different things. The color channels of a color contain a value between 0 and 1.

The following script loops through the pixels of the selected raster and creates a grid of circle shaped paths of varying sizes depending on the <code>gray</code> value of their colors.

<paperscript height=400 split=true>
// Create a raster item using the image tag with id='mona'
var raster = new Raster('mona');

// Hide the raster:
raster.visible = false;

// The size of our grid cells:
var gridSize = 12;

// Space the cells by 120%:
var spacing = 1.2;

// As the web is asynchronous, we need to wait for the raster to load
// before we can perform any operation on its pixels.
raster.on('load', function() {
	// Since the example image we're using is much too large,
	// and therefore has way too many pixels, lets downsize it to
	// 40 pixels wide and 30 pixels high:
	raster.size = new Size(40, 30);

	for (var y = 0; y < raster.height; y++) {
		for(var x = 0; x < raster.width; x++) {
			// Get the color of the pixel:
			var color = raster.getPixel(x, y);

			// Create a circle shaped path:
			var path = new Path.Circle({
				center: new Point(x, y) * gridSize,
				radius: gridSize / 2 / spacing,
				fillColor: 'black'
			});

			// Scale the path by the amount of gray in the pixel color:
			path.scale(1 - color.gray);
		}
	}

	// Move the active layer to the center of the view, so all 
	// the created paths in it appear centered.
	project.activeLayer.position = view.center;
});
</paperscript>

This code is very similar to the example above, but this time we don't fill the paths with the color we find when we call <api Raster.getPixel(x,y) />. Instead, we look at how dark the color is using <api Color#gray />, which is a value between <code>0</code> (white) and <code>1</code> (black) and use it to scale the paths.

<image "mona-lisa-1.jpg" id="mona" class="hidden" />