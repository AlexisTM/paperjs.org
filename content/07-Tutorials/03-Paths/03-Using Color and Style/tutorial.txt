In the following tutorial we will be looking at the different ways to go about styling items in your project.

<title>Example Path</title>

For the examples in this tutorial we will be using a checkmark shaped path which we create using the following code:

<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]],
	selected: true
});
</paperscript>

<note>To find out how to create paths with Paper.js, please read the <page "/tutorials/paths/working-with-path-items/" /> tutorial.</note>

<title>Stroke Color</title>

To add a stroke to our path, we need to set its <api Item#strokeColor>strokeColor</api> property.

The following example shows how to set the stroke color of the path we created earlier to the color red, using a hexidecimal string (Also known from HTML CSS Styles):
<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]]
});

myPath.strokeColor = '#ff0000'; // red
</paperscript>

The hexadecimal color code is automatically converted to a <api Color /> object.

The color can also be set using an <api Color /> object directly. In the following code we set an RGB color with 50% red, 0% green and 50% blue:
<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]]
});

myPath.strokeColor = new Color(0.5, 0, 0.5);
</paperscript>

<note>
In Paper.js color component values range from 0 to 1.
</note>

<title>Fill Color</title>
Fill color works exactly the same way as stroke color. In the following example we will create a path with a red fill color:

<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]],
	selected: true
});

myPath.fillColor = '#ff0000';
</paperscript>

<title>Stroke Width</title>
To change the stroke width of an item, you can change its <api item#strokeWidth>strokeWidth</api> property.

In the following example we give the path a red stroke of 10 pt:
<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]]
});

myPath.strokeColor = '#ff0000';

myPath.strokeWidth = 10;
</paperscript>

<title>Stroke Cap</title>
To change the shape of the start and the end of a path, you can change its <api item#strokeCap>strokeCap</api> property to either <code>'round'</code>, <code>'square'</code> or <code>'butt'</code>:

<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]],
	selected: true
});

myPath.strokeColor = '#ff0000';
myPath.strokeWidth = 10;

myPath.strokeCap = 'round';
</paperscript>

<title>Stroke Join</title>
To change the shape of the corners in a path, you can change its <api item#strokeJoin>strokeJoin</api> property to either <code>'miter'</code>, <code>'round'</code> or <code>'bevel'</code>:

<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]],
	selected: true
});

myPath.strokeColor = '#ff0000';
myPath.strokeWidth = 10;

myPath.strokeJoin = 'round';
</paperscript>

<title>Dashed Stroke</title>
To create a dashed stroke, you can change the <api item#dashArray>dashArray</api> property of an item. The following code produces a dashed stroke with a 10pt dash and a 12pt gap:

<paperscript width=540 height=200 split=true>
var myPath = new Path({
	segments: [[40, 115], [80, 180], [200, 20]],
	selected: true
});

myPath.strokeColor = '#ff0000';
myPath.strokeWidth = 5;
myPath.strokeCap = 'round';

myPath.dashArray = [10, 12];
</paperscript>

<title>The PathStyle Object</title>
Every item also has an <api item#style /> property which is an object containing only style properties.

We can use this to copy the style properties of one item to another. The following example first creates a circle shaped path and assigns it a stroke color. Then another circle shaped path is created and we assign it the style of the first path:

<paperscript width=540 height=100 split=true>
var firstPath = new Path.Circle({
	center: [80, 50],
	radius: 35
});

firstPath.strokeColor = '#ff0000';
firstPath.fillColor = 'blue';

// secondPath doesn't have a strokeColor yet:
var secondPath = new Path.Circle({
	center: [160, 50],
	radius: 35
});

// Apply the style of firstPath to that of secondPath:
secondPath.style = firstPath.style;
</paperscript>

The <api item#style /> property also comes in handy for setting multiple style properties in one go.

In the following example we create an object containing a number of style properties and pass it to the item's style property to set them all in one go:

<paperscript width=540 height=200 split=true>
var myStyle = {
	strokeColor: '#00ffff',
	fillColor: '#000000',
	strokeWidth: 50
};

var myCircle = new Path.Circle({
	center: [100, 100],
	radius: 50
});
myCircle.style = myStyle;
</paperscript>

<title>Removing Styles</title>

To remove any kind of path style, just pass <code null /> to the property:

<code>
var path = new Path.Circle({
	center: new Point(50, 50),
	radius: 50
});
path.fillColor = 'red';

// Set the fillColor to null to remove it:
path.fillColor = null;
</code>

To remove all style settings from a path, pass <code null /> to its style property:

<code>
var path = new Path.Circle({
	center: [50, 50],
	radius: 50
});
path.style = null;
</code>

<title short="Current Style of the Project">Working with the Current Style of the Project</title>

As I mentioned earlier, all newly created items automatically receive the currently active path style properties as defined in the Illustrator interface. We can also change these through code by using <api project.currentStyle />.

<api project.currentStyle /> is the <api PathStyle /> object of the project and contains the currently active style properties such as <code>fillColor</code> and <code>strokeColor</code>.

The following example changes the current style of the project, then creates a path which inherits that style. Then it changes only the <code>strokeWidth</code> and creates another path.

<image "currentStyle.gif" />

<paperscript width=540 height=200 split=true>
// Change the current style of the project:
project.currentStyle = {
	strokeColor: '#000000',
	fillColor: '#ff0000',
	strokeWidth: 3
};

// This path will inherit the styles we just set:
var firstPath = new Path.Circle({
	center: [100, 100],
	radius: 50
});

// Change the current stroke width and fill color of the project:
project.currentStyle.strokeWidth = 8;
project.currentStyle.fillColor = 'green';

// This path will have a green fill and have a strokeWidth of 8pt:
var secondPath = new Path.Circle({
	center: [250, 100],
	radius: 50
});
</paperscript>
